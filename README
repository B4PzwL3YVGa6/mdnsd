Copyright (c) 2010, Christiano F. Haesbaert <haesbaert@haesbaert.org>

           Multicast Domain Name System for OpenBSD
           ----------------------------------------
Intro
-----
This is an attempt to bring native mdns/dns-sd to OpenBSD. Mainly
cause all the other options suck and proper network browsing is a nice
feature these days.

Why not Apple's mdnsd ? Well because:
    1 - It sucks big time.
    2 - No BSD License (Apache-2).
    3 - Overcomplex API.
    4 - Not OpenBSD-like.
    
Why not Avahi ? Well because:
    1 - No BSD License (GPL).
    2 - Overcomplex API.
    3 - Not OpenBSD-like
    4 - DBUS and lots of dependencies.

My goal is to first provide a solid mdns framework without the
service-discovery capabilities which are much more complex. When that
is working properly, work on service-discovery will begin, the
architecture was designed in order to support it. So goals:
        * Have a mdns responder/querier as a user process (mdnsd).
        * Have integration with libc's resolver, read: make
        gethostbyname and friends resolve names through mdns.
        * Have a an application interface so other software can
        publish names/services as they see fit.
        * Have a mdns control program, which is mainly a crude
        interface to the api.
I have decided to support only the .local domain, the draft says it
should support any domains, but I find it dumb and error-prone, nobody
in it's sane conscience will use another domain for mdns. If you do,
you're wrong.

MDNSD Design
------------
The "Multicast Domain Name System Daemon" is a user process that runs
without privileges, it binds to udp 5353 and acts as the
querier/responder for all mdns requests. By responder we understand
who is responsible for answering mdns queries, and by querier the
other way around, read: This is different from libc's unicast
resolver, we *NEED* to cache answers and maintain state.

As most OpenBSD daemons, it drops privilege upon startup and none task
requires super-user privilege. All work is done on a single process,
my first design had a process per interface, but that became overkill
and overcomplex.

The api interface is designed above Henning Brauer imsg framework, so
we have a unix domain socket that listen to requests from other
processes, much like ripctl and ospfctl do, but we need a fancier api.
We use libevent and all it's glorious features to have a proper unix
daemon.

We have a routing socket in order to be notified when link goes up and
down, or when an interface address changes, this is *required* in
order to publish records, every time link comes up we need to register
our name and things like that, we use as our main name the short name
from /etc/mygate, in the .local domain. So multiple interfaces is
supported.

So the basic data flow is:
 __________                              _______  
| Programs | <--Control Socket (API)--> | MDNSD | <-- Mcast Packets -->
 ----------                              -------

LIBMDNS Design (API)
--------------------
Libmdns is a shared library in which programs can link to have mdns
capabilities, like publishing services, browsing the network and so
on, by now the only thing it does is to resolve mdns names, no service
capabilities yet. All the library does is sending and receiving
messages to mdnsd through the imsg framework.
The library should provide in the near future:
     * Means for looking up names. (DONE)
     * Means for publishing names.
     * Means for browsing services (dns-service-discovery).
     * Means for publishing services.

On libc integration:
After a chat with nicm@ we have decided not to worry about libc right
now, maybe never, so I'm making libmdns a shared library with no libc
integration. See the README file on mdns-libc branch if you're curious.
     
MDNSCTL
-------
     It's a simple interface for the library, code is inspired in
     ripctl, should provide all libmdns functionalities as written
     above.

How do I use this thing ?
-------------------------
     Get the freaking sources from http://github.com/haesbaert/mdnsd .
     Install includes with "make includes" in libmdns directory.
     Compile and install libmdns
     Compile and install mdnsd and mdnsctl
     Make sure you have proper multicast setup (man 7 netstart), or
     just add a route to lo0:
          route delete 224/4
          route add 224/4 lo0
     
     Play with mdnsctl :). 
